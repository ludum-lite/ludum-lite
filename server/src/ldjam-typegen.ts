/**
 * This file was automatically generated by GraphQL Nexus
 * Do not make changes to this file directly
 */

import * as ctx from './data-sources/context'
import { FieldAuthorizeResolver } from '@nexus/schema/dist/plugins/fieldAuthorizePlugin'
import { core } from '@nexus/schema'
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    date<FieldName extends string>(
      fieldName: FieldName,
      opts?: core.ScalarInputFieldConfig<
        core.GetGen3<'inputTypes', TypeName, FieldName>
      >
    ): void // "Date";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    date<FieldName extends string>(
      fieldName: FieldName,
      ...opts: core.ScalarOutSpread<TypeName, FieldName>
    ): void // "Date";
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  SearchPostsFiltersInput: {
    // input type
    postType: NexusGenEnums['PostType'] // PostType!
  }
}

export interface NexusGenEnums {
  PostType: 'news' | 'user'
}

export interface NexusGenRootTypes {
  Mutation: {}
  Post: {
    // root type
    authorId: number // Int!
    body: string // String!
    createdDate?: string | null // String
    id: number // Int!
    lastLoveChangedDate?: string | null // String
    lastNotesChangedDate?: string | null // String
    modifiedDate?: string | null // String
    name?: string | null // String
    numLove?: number | null // Int
    numNotes?: number | null // Int
    parentId: number // Int!
    parentIds: Array<number | null> // [Int]!
    path?: string | null // String
    publishedDate?: string | null // String
    slug?: string | null // String
    subsubtype?: string | null // String
    subtype?: string | null // String
    superparentId: number // Int!
    type?: string | null // String
  }
  Query: {}
  SearchPostResponse: {
    // root type
    limit: number // Int!
    page: number // Int!
    posts: NexusGenRootTypes['Post'][] // [Post!]!
  }
  User: {
    // root type
    avatarPath?: string | null // String
    createdDate: string // String!
    id: number // Int!
    modifiedDate: string // String!
    name: string // String!
    numGames: number // Int!
    numPosts: number // Int!
    profilePath: string // String!
    type: string // String!
  }
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  Date: Date
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  SearchPostsFiltersInput: NexusGenInputs['SearchPostsFiltersInput']
  PostType: NexusGenEnums['PostType']
}

export interface NexusGenFieldTypes {
  Mutation: {
    // field return type
    login: string // String!
  }
  Post: {
    // field return type
    author: NexusGenRootTypes['User'] | null // User
    authorId: number // Int!
    body: string // String!
    createdDate: string | null // String
    id: number // Int!
    lastLoveChangedDate: string | null // String
    lastNotesChangedDate: string | null // String
    modifiedDate: string | null // String
    name: string | null // String
    numLove: number | null // Int
    numNotes: number | null // Int
    parentId: number // Int!
    parentIds: Array<number | null> // [Int]!
    path: string | null // String
    publishedDate: string | null // String
    slug: string | null // String
    subsubtype: string | null // String
    subtype: string | null // String
    superparentId: number // Int!
    type: string | null // String
  }
  Query: {
    // field return type
    me: NexusGenRootTypes['User'] // User!
    post: NexusGenRootTypes['Post'] // Post!
    searchPosts: NexusGenRootTypes['SearchPostResponse'] // SearchPostResponse!
    user: NexusGenRootTypes['User'] // User!
  }
  SearchPostResponse: {
    // field return type
    limit: number // Int!
    page: number // Int!
    posts: NexusGenRootTypes['Post'][] // [Post!]!
  }
  User: {
    // field return type
    avatarPath: string | null // String
    createdDate: string // String!
    id: number // Int!
    modifiedDate: string // String!
    name: string // String!
    numGames: number // Int!
    numPosts: number // Int!
    profilePath: string // String!
    type: string // String!
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    login: {
      // args
      email: string // String!
      password: string // String!
    }
  }
  Query: {
    post: {
      // args
      id: number // Int!
    }
    searchPosts: {
      // args
      filters: NexusGenInputs['SearchPostsFiltersInput'] // SearchPostsFiltersInput!
      limit: number // Int!
      page: number // Int!
    }
    user: {
      // args
      id: number // Int!
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames =
  | 'Mutation'
  | 'Post'
  | 'Query'
  | 'SearchPostResponse'
  | 'User'

export type NexusGenInputNames = 'SearchPostsFiltersInput'

export type NexusGenEnumNames = 'PostType'

export type NexusGenInterfaceNames = never

export type NexusGenScalarNames =
  | 'Boolean'
  | 'Date'
  | 'Float'
  | 'ID'
  | 'Int'
  | 'String'

export type NexusGenUnionNames = never

export interface NexusGenTypes {
  context: ctx.Context
  inputTypes: NexusGenInputs
  rootTypes: NexusGenRootTypes
  argTypes: NexusGenArgTypes
  fieldTypes: NexusGenFieldTypes
  allTypes: NexusGenAllTypes
  inheritedFields: NexusGenInheritedFields
  objectNames: NexusGenObjectNames
  inputNames: NexusGenInputNames
  enumNames: NexusGenEnumNames
  interfaceNames: NexusGenInterfaceNames
  scalarNames: NexusGenScalarNames
  unionNames: NexusGenUnionNames
  allInputTypes:
    | NexusGenTypes['inputNames']
    | NexusGenTypes['enumNames']
    | NexusGenTypes['scalarNames']
  allOutputTypes:
    | NexusGenTypes['objectNames']
    | NexusGenTypes['enumNames']
    | NexusGenTypes['unionNames']
    | NexusGenTypes['interfaceNames']
    | NexusGenTypes['scalarNames']
  allNamedTypes:
    | NexusGenTypes['allInputTypes']
    | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames']
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes
}

declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {}
  interface NexusGenPluginFieldConfig<
    TypeName extends string,
    FieldName extends string
  > {
    /**
     * Authorization for an individual field. Returning "true"
     * or "Promise<true>" means the field can be accessed.
     * Returning "false" or "Promise<false>" will respond
     * with a "Not Authorized" error for the field.
     * Returning or throwing an error will also prevent the
     * resolver from executing.
     */
    authorize?: FieldAuthorizeResolver<TypeName, FieldName>
  }
  interface NexusGenPluginSchemaConfig {}
}
